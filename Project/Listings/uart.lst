C51 COMPILER V9.56.0.0   UART                                                              08/14/2020 16:10:46 PAGE 1   


C51 COMPILER V9.56.0.0, COMPILATION OF MODULE UART
OBJECT MODULE PLACED IN .\Objects\uart.obj
COMPILER INVOKED BY: C:\program_list\keil\C51\BIN\C51.EXE ..\hardware\Uart\uart.c LARGE OPTIMIZE(8,SPEED) BROWSE INCDIR(
                    -..\hardware\DELAY;..\hardware\ADC;..\hardware\Flash;..\hardware\Uart;..\hardware\Key;..\hardware\Pwm;..\hardware\WDT;..\
                    -hardware\Timer;..\hardware\LCDdisplay;..\hardware\PID) DEBUG OBJECTEXTEND PRINT(.\Listings\uart.lst) TABS(2) OBJECT(.\Ob
                    -jects\uart.obj)

line level    source

   1          #include "uart.h"
   2          #include "key.h"
   3          
   4          extern volatile u8 usart_rx_buffer[30] = {0};
   5          extern volatile u8 usart_rx_cnt;
   6          extern  u8 usart_rx_flag;
   7          
   8          
   9          
  10          #define PRODUCTE_CMD_HEADER_VALUE                   0x55
  11          #define PRODUCTE_CMD_TAIL1_VALUE                    0x0D
  12          #define PRODUCTE_CMD_TAIL2_VALUE                    0x0A
  13          
  14          
  15          struct producte_cmd_struct
  16          {
  17            u8 header;
  18            u8 funcode;
  19            u8 Data;
  20            u8 tail1;
  21            u8 tail2;
  22          };
  23          
  24          
  25          
  26          //初始化串口9600
  27          void uart_init ( void )
  28          {
  29   1      #if _DEBUG_PRINTF_
  30   1        P2M6 =  0xC1;   //P26设置为推挽输出   0xC1
  31   1        P2M5 = 0x60;    //P25设置为上拉输入 0x60
  32   1        TXD_MAP = 0x26;   //TXD映射P26
  33   1        RXD_MAP = 0x25;   //RXD映射P25
  34   1        T4CON = 0x06;   //T4工作模式：UART1波特率发生器
  35   1        //波特率计算
  36   1        //波特率 = 1/16 * (T4时钟源频率 / 定时器4预分频比) / (65536 - 0xFF98)
  37   1        //       = 1/16 * ((16000000 / 1) / 104)
  38   1        //     = 9615.38(误差0.16%)
  39   1      
  40   1        //波特率9600
  41   1        //反推初值 = (65536 - ((T4时钟源频率 / 定时器4预分频比) * (1 / 16)) / 波特率)
  42   1        //       = (65536 - (16000000 * (1 / 16) / 9600))
  43   1        //       = (65536 - 104.167)
  44   1        //         = FF98
  45   1        // TH4 = 0xFF;
  46   1        // TL4 = 0x98;      //波特率9600
  47   1      //  TH4 = 0xFF;//9600  4M 波特率9600
  48   1      //  TL4 = 0x98;
  49   1      //  T4CON = 0x06;   //T4工作模式：UART1波特率发生器
  50   1      //  SCON2 = 0x02;   //8位UART，波特率可变 方式一
  51   1      //  SCON = 0x10;    //允许串行接收
  52   1      //  ES1 = 1;      //使能串口中断
C51 COMPILER V9.56.0.0   UART                                                              08/14/2020 16:10:46 PAGE 2   

  53   1      
  54   1        TH4 = 0xFF;
  55   1        TL4 = 0x98;             //波特率9600
  56   1        SCON2 = 0x02;           //8位UART，波特率可变
  57   1        SCON = 0x10;            //允许串行接收
  58   1        IE |= 0x10;             //使能串口中断
  59   1        EA = 1;               //使能总中断
  60   1      #endif
  61   1      }
  62          
  63          
  64          //串口发送一个字符
  65          static void hal_uart_putchar ( char Char )
  66          {
  67   1      //  ES1= 0;       //失能UART1中断
  68   1      //  SBUF = Char;
  69   1      //  while(!TI);
  70   1      //  TI = 0;
  71   1      //  ES1= 1;       //UART1接收使能
  72   1      
  73   1        IE &=~ 0x10;        //失能UART1中断
  74   1        SBUF =  Char;     //发送8位串口数据
  75   1        while ( ! ( SCON & 0x02 ) );
  76   1        SCON &=~ 0x02;        //清除发送中断标志位
  77   1        IE |= 0x10;         //UART1中断使能
  78   1        SCON |= 0x10;       //UART1接收使能
  79   1      }
  80          
  81          
  82          /* @function:串口发送一个字节
  83           * @param:需要发送的字节
  84           * @return:None
  85           */
  86          static void producte_com_send_one_bit ( char Data )
  87          {
  88   1        hal_uart_putchar ( Data );
  89   1      }
  90          /* @function:串口发送数组
  91           * @param:data:数组头指针
  92           *        len:数组长度
  93           * @return:None
  94           */
  95          static void producte_com_send_data ( u8* Data, u8 len )
  96          {
  97   1        u8 i;
  98   1        for ( i = 0; i < len; i++ )
  99   1        {
 100   2          producte_com_send_one_bit ( Data[i] );
 101   2        }
 102   1      }
 103          
 104          /* @function:发送命令
 105           * @param:funcode:功能码
 106           *        data:数据
 107           * @return:None
 108           */
 109          void producte_send_cmd ( u8 funcode, u8 Data )
 110          {
 111   1        struct producte_cmd_struct cmd_t;
 112   1        cmd_t.header = PRODUCTE_CMD_HEADER_VALUE;
 113   1        cmd_t.funcode = funcode;
 114   1        cmd_t.Data = Data;
C51 COMPILER V9.56.0.0   UART                                                              08/14/2020 16:10:46 PAGE 3   

 115   1        cmd_t.tail1 = PRODUCTE_CMD_TAIL1_VALUE;
 116   1        cmd_t.tail2 = PRODUCTE_CMD_TAIL2_VALUE;
 117   1        producte_com_send_data ( ( u8* ) &cmd_t, sizeof ( struct producte_cmd_struct ) );
 118   1      }
 119          
 120          
 121          //重写stdio 中的putchar函数  实现printf
 122          char putchar ( char c )
 123          {
 124   1        hal_uart_putchar ( c );
 125   1        return c;
 126   1      }
 127          
 128          
 129          void UART1_Rpt ( void ) interrupt UART1_VECTOR
 130          {
 131   1        u8 Data = 0;
 132   1        if ( SCON & 0x01 )            //判断接收中断标志位
 133   1        {
 134   2          Data = SBUF;        //转存8位串口接收数据
 135   2          SCON &=~ 0x01;                //清除接收中断标志位
 136   2          /* receive Data */
 137   2          switch ( usart_rx_flag )
 138   2          {
 139   3            case 0:
 140   3              if ( Data == 0x55 )
 141   3              {
 142   4                usart_rx_buffer[0] = Data;
 143   4                usart_rx_cnt++;
 144   4                //  putchar( usart_rx_cnt);
 145   4                usart_rx_flag = 1;
 146   4                hal_uart_putchar ( Data );
 147   4                // LED1 = !LED1;
 148   4      
 149   4              }
 150   3              break;
 151   3            case 1:
 152   3              if ( Data == 0x02 )
 153   3              {
 154   4                usart_rx_flag = 3;
 155   4      
 156   4              }
 157   3              break;
 158   3      
 159   3          }
 160   2      
 161   2      
 162   2        }
 163   1      }
 164          
 165          
 166          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    228    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----       8
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
C51 COMPILER V9.56.0.0   UART                                                              08/14/2020 16:10:46 PAGE 4   

END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
